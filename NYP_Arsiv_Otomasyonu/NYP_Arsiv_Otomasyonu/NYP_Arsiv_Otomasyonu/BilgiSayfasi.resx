<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAPgAAAH8AAAD/gAAB/8AAA//gAAf/+AAf8=
</value>
  </data>
</root>